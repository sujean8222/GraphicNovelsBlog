[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "The Recipe to an Adaptation Blog Post\n\n\n\n\n\nExamining Graphic Novel trends in Adaptations\n\n\n\n\n\nJul 31, 2024\n\n\nSujean Gallego\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 27, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/GraphicNovels.html#an-overview",
    "href": "posts/GraphicNovels.html#an-overview",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "1. An Overview",
    "text": "1. An Overview\nadaptation – the action or process of adapting or being adapted.\nOr a term to describe a piece of media, usually a television show or movie, that is based on pre-existing work, usually literary or theatrical work.\nThis type of work is very common, so much so that the Oscars even has a category “Best Adapted Screenplay.” Some of the films that won include:\n\nThe Godfather (1972)\nL.A. Confidential (1997)\nThe Lord of the Rings: Return of the King (2003)\nThe Social Network (2010)\nMoonlight (2016)\n\nSome recognizable titles also include:\n\nThe Color Purple (1985)\nShrek (2001)\nGame of Thrones (2011)\nThe Handmaid’s Tale (2017)\nThe Last of Us (2023)\nOppenheimer (2023)\n\nAnd there is so much more!\nQuickly scrolling through the list of winners in this category on Wikipedia, I noticed that most of these adaptations are based on novels. Very few were theatrical plays, musicals, and, especially, graphic novels. Of course, this could just be due to the fact that I was looking through a list of Oscar nominees. Maybe the Oscars don’t value adaptations based off of graphic novels. Or maybe the quality of adaptations that were made based on graphic novels were never good enough to gain an Oscar nomination. Or maybe there is just a lack of graphic novels in the literary space to begin with.\nWorld renowned director Martin Scorscese once said, “I don’t think [Marvel movies are] cinema” (Connell). Marvel movies are all adapted works based on graphic novels, specifically in the superhero genre. Now that is a whole different conversation that can be very dividing. Something that I will not be delving into in this project. Nonetheless, this shows how graphic novels as a type of work are largely looked down upon. And this doesn’t just end at the lack of adaptations, this is also seen in literary space as well. They are often looked down upon as a lesser form of literature for their lack of text, abundance of pictures, and themes, which are usually superhero-based (Mwissell). People view them congruent to children’s books, which are less text and picture-based, and therefore view graphic novels work targeted towards children, incapable of revealing deeper meanings and insights to life as novels do.\nNow the opposite is seen internationally. Countries such as Japan and South Korea are well known for their adaptations of graphic novels in the media space, and actually seem to be the preferred form of entertainment. Mangas (Japanese graphic novels) have become a major driving force in Japan’s economy (Luster) and top source for adaptations in Japanese entertainment, especially in anime. While not to the same extent, manhwas (South Korean graphic novels) have also been a relevant part of South Korean culture and media. Korean dramas such as The Princess Hours and Boys Over Flowers are examples of Korean entertainment adapted from graphic novels that have accumulated a large cultural significance and an iconic status. Like Japan, South Korean Webtoons—digitally published comics and graphic novels—have become the top source of adaptations for Korean Dramas. It seems much easier to adapt: storyboards are already laid out, a couple of changes can be made to suit the director, the script is basically all written. So…\nWhy aren’t we seeing the same trend in the United States? Is it really American pride and stigma preventing these graphic novels from receiving an adaptation?\nMaybe not…? One example can be seen in Nick Drnasno’s Sabrina, published in 2018, which became the first ever graphic novel to be longlisted for the Booker Prize, a highly prestigious literary award that is selected from a longlist and shortlist of nominees every year (NewStatesman). Winning the Booker Prize basically means that said-book is the “best single work” published in said-year. And being nominated is a great achievement in itself. Sabrina was praised for its mature themes relevant to today’s society which was only elevated by its drawings and visual style (Park). Similar sentiments were met with the graphic novel Persepolis by Marjane Satrapi, which did get an animated feature adaptation in 2007. The film by the same name was also met with great critical acclaim receiving a 97% score on RottenTomatoes (RottenTomatoes)."
  },
  {
    "objectID": "posts/GraphicNovels.html#the-question",
    "href": "posts/GraphicNovels.html#the-question",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "2. The Question",
    "text": "2. The Question\nWith so many outside factors it’s hard to determine why graphic novels aren’t more adapted in today’s society. But maybe the books themselves can reveal traits or characteristics that may shed some light on what makes a good graphic novel for adaptation. In this project, I use data from the Graphic Narrative Corpus, to answer the question:\nWhat makes a good graphic novel for adaptation? or What is the recipe for scoring an adaptation as a graphic novel?"
  },
  {
    "objectID": "posts/GraphicNovels.html#about-the-data",
    "href": "posts/GraphicNovels.html#about-the-data",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "3. About the Data",
    "text": "3. About the Data\nThe data was collected by literary scholars and computer and cognitive scientists at Potsdam and Paderborn universities for a research project, funded by the German Federal Ministry of Education and Research. A total of 253 titles published in the United States, Great Britain, Canada, and India are included in the dataset. Requirements for inclusion were that novels had to be written in English, exceed 64 pages in length, tell one continuous story, target an adult audience and form one single volume or a limited series. Both nonfiction and fictional texts are included in the data, with a vast variety of genres. The project ran from 2014-2020, but includes texts published from the mid-70s to 2017, garnered through various types of collections such as academic databases, library collections, and online lists and bibliographies (cite). The GNC has a total of 20 tables [Adaptation, Author, Book, Book Genre, Country, Ethnicity, Format, Gender, Genre, GNSource, Issue, Language, Place, Publisher, RelBookAuthor, RelBookIllustrator, Source, SourceCategory, SelectionSource,Translation] each coming as their own .csv file. It was noted that because they used a “cheap” data GUI, they referred to the book title rather than the ID. In addition, a “Scheme” PDF file was given which lists brief information about each table and their respective variables, however, the table Book Genre was not listed in the pdf, it was only seen briefly in their Corpus Graph visualization. Some of the tables provided were simply selection sources–or listed options/codes–for columns in other variables. Thus, the tables used in this project were not “selection sources” and selected based on their importance in answering the research question. Specifically, we used the tables:\n\nAdaptation, represented different adaptations (like movie, tv series, novel…) of graphic novels.\nAuthor, information on the authors and illustrators.\nBook, main table, contains the information on the books.\nBook Genre, provides the genres for each of the books.\nRelBookAuthor, junction table to represent the n:m relationship between the book and its authors.\nIssue, represents the different issues published for a book.\n\nLink: https://groups.uni-paderborn.de/graphic-literature/gncorpus/corpus.php"
  },
  {
    "objectID": "posts/GraphicNovels.html#importing-and-cleaning-code",
    "href": "posts/GraphicNovels.html#importing-and-cleaning-code",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "1. Importing and Cleaning Code",
    "text": "1. Importing and Cleaning Code\n\nImporting libraries and .csv files\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ngraphic_novels = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Book.csv')\nadaptations = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Adaptation.csv')\nauthors = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Author.csv')\nbook_genres = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/BookGenre.csv')\nissue = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Issue.csv')\nrel_book_author = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/RelBookAuthor.csv')\n\n\n\nData Cleaning/Organization code:\n\ngraphic_novels.columns = ['ID', 'Title', 'Mentions', 'Unclear', 'Date Published', 'Image', 'Original Language', 'Foreign Key','GN_Source', 'color_type', 'Limited Series', 'Book Series', 'Unlimited Series', 'ISBN', 'Directory','Avg Rating', 'Number of Ratings', 'Original Title', 'Unlisted', 'Unlisted', 'Unlisted', 'Unlisted', 'University']\nadaptations.columns = ['ID', 'BookID', 'Type', 'Title', 'Publication']\nauthors.columns = ['ID', 'FirstName', 'LastName', 'Gender_ID', 'CountryOfOriginID', 'CountryOfResidence', 'DateOfDeath', 'DateOfBirth', 'Ethnicity', 'PenName']\nbook_genres.columns = ['ID', 'BookID', 'SourceID', 'GenreID', 'isMain']\nissue.columns = ['ID', 'FormatID', 'Edition', 'BookID', 'LanguageID', 'Mentions', 'Pages', 'PlaceOfPublicationID', 'PublisherID', 'Delete', 'Date', 'Width', 'Depth', 'Height', 'Unit']\nrel_book_author.columns = ['ID', 'BookID', 'AuthorID']\n\n\ngraphic_novels.drop(columns=['Unclear', 'Unlisted', 'Unlisted', 'Unlisted', 'Unlisted', 'University'], inplace=True)\nissue.drop(columns='Delete', inplace = True)\n\n\nadaptations.loc[17, ['Type', 'Title', 'Publication']] = ['Television series', 'Games Of Thrones', '2011-04-17']\nadaptations.loc[18, ['Type', 'Title', 'Publication']] = ['Television series', 'Games Of Thrones', '2011-04-17']\nadaptations.loc[24, 'Publication'] = 'Never Published'\nadaptations.loc[42, 'Publication'] = 'Never Published'\nadaptations.loc[55, ['Type', 'Title', 'Publication']] = ['Feature film', 'Kakera', '2010-04-03']\n\n\nadaptations = adaptations.drop(index=[24, 42])\n\n\nrel_book_author.loc[26, 'AuthorID'] = 61\nrel_book_author.loc[48, 'AuthorID'] = 122\nrel_book_author.loc[128, 'AuthorID'] = 64\nrel_book_author.loc[132, 'AuthorID'] = 7\nrel_book_author.loc[133, 'AuthorID'] = 29\nrel_book_author.loc[154, 'AuthorID'] = 11\nrel_book_author.loc[219, 'AuthorID'] = 396\nrel_book_author.loc[220, 'AuthorID'] = 397\n\n\nauthorID = []\nfor i in rel_book_author['AuthorID']:\n  if i in authors['ID'].values:\n    authorID.append(i)\n\n\nauthors = authors[authors['ID'].isin(authorID)]\n\n\nauthors.loc[233, 'Gender_ID'] = 1\n\n\nauthors.loc[[32, 72, 188, 306, 346], 'CountryOfOriginID'] = 'USA'\nauthors.loc[[103, 212], 'CountryOfOriginID'] = 'Canada'\nauthors.loc[233, 'CountryOfOriginID'] = 'Iran'\n\n\nauthors.loc[[306, 346], 'Ethnicity'] = 'White'\n\n\nissue.loc[136, 'Pages'] = 128\nissue.loc[178, 'Pages'] = 152\nissue.loc[200, 'Pages'] = 240\nissue.loc[285, ['Pages', 'PlaceOfPublicationID', 'PublisherID']] = [240, 'New York, USA', 'Bantam Books']\nissue.loc[296, ['Pages', 'PlaceOfPublicationID']] = [224, 'Cincinnati, USA']\nissue.loc[318, 'Pages'] = 176\n\n\nrel_book_author.drop_duplicates(subset=['BookID', 'AuthorID'], inplace=True)\n\n\nadaptations['Publication'] = pd.to_datetime(adaptations['Publication'])\nadaptations['Year'] = adaptations['Publication'].dt.year\nadaptations['Month'] = adaptations['Publication'].dt.month\nadaptations['Day'] = adaptations['Publication'].dt.day\n\ngraphic_novels['Date Published'] = pd.to_datetime(graphic_novels['Date Published'], format='%m/%d/%y')\ngraphic_novels['Year'] = graphic_novels['Date Published'].dt.year\ngraphic_novels['Month'] = graphic_novels['Date Published'].dt.month\ngraphic_novels['Day'] = graphic_novels['Date Published'].dt.day"
  },
  {
    "objectID": "posts/GraphicNovels.html#methodology",
    "href": "posts/GraphicNovels.html#methodology",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "2. Methodology",
    "text": "2. Methodology\nOur ultimate goal is to answer the question: “What is the recipe for scoring an adaptation as a graphic novel?\nWe can begin by asking the question: “What are the traits in books that receive adaptations?”\nTo do so, we first must identify what kind of traits we want to examine…We look at the exploratory data to determine what factors (or columns) seemed to show the most variabilitly. - graphic_novels’s Year, the published year of books - graphic_novels’s Avg Rating, average ratings out of 5 stars of books on goodreads - graphic_novels’s Number of Ratings, amount of entires of ratings on goodreads - book_genres’s Genre, different genres of books - issues’s Pages, amount of pages per book\n**Columns that had a dominant value were not included, as it is likely to be the same for all books.*\n\nBelow are some examples of exploratory data visualizations that are relevant to the study:\n\nadaptations['Year'].value_counts().plot(kind='bar', color='brown', figsize=(10, 2), title='Frequency of Adaptations released per year')\n\n\n\n\n\n\n\n\nMost of adaptations were published in the 2000s, specifically between 2005-2013. Adaptations began releasing in the early 1970s.\n\ngraphic_novels['Year'].value_counts().plot(kind='bar', color='pink', figsize=(10, 2), title='Frequency of Graphic Novel released per year')\n\n\n\n\n\n\n\n\nMajority of graphic novels were published in the 2000s. There is an upward trend in publication of graphic novels as the years go by. The most popular year to publish was 2015.\n\ngraphic_novels.plot.scatter(x = 'Avg Rating', y = 'Number of Ratings', color='pink', figsize=(10, 3), marker = 'o', title='Number of Ratings vs. Average Rating Score')\n\n\n\n\n\n\n\n\nAverage book rating is around the 3.6-4.2 range. There is also a small correlation between number of ratings and average rating in that the more number of ratings, the higher average rating a book receives.\nWe must also identify the different groups we will be comparing.\nSince we are testing adapted books, we will have to create a dataframe consisting of all books that have been adapted and compare that between all books and books that have not been adapted. It would also be interesting to test the difference between books that have been adapted more than once, books that have been adapted into a film, television series, and other.\nIn total, we have the following groups: - adapted books - books - non-adapted books - multiple adapted books - film adapted books - television adapted books - other adapted books\n\n\nBelow is the code we used to create the groupings of dataframes:\n\n\nAdaptations - made up of all books that have been adapted.\n\nadap_books = adaptations[['BookID']].drop_duplicates().reset_index(drop=True)\n\n\nadap_books_title = []\nfor index, i in adap_books.iterrows():\n  for index, book in graphic_novels.iterrows():\n    if i['BookID'] == book['ID']:\n      adap_books_title.append(book['Title'])\n      \nadap_books['Title'] = adap_books_title\n\n\n\nBooks - made up of all books.\n\nbooks = graphic_novels[['ID', 'Title']]\nbooks.columns = ['BookID', 'Title']\n\n\n\nNon-Adapted Books - made up of all books that have not been adapated.\n\nno_adap_books = books[~books['BookID'].isin(adaptations['BookID'])].reset_index(drop=True)\n\n\n\nMultiple-Adapted Books - made up of books that have been adapated more than once.\n\nfrequency_adaptations = adaptations['BookID'].value_counts()\nfrequency_adaptations = frequency_adaptations.reset_index()\nfrequency_adaptations.columns = ['BookID', 'Count']\n\n\nmult_adap_id = []\nfor index, book in frequency_adaptations.iterrows():\n  if book['Count'] &gt; 1: \n    mult_adap_id.append(book['BookID'])\n\nmult_adap_name = []\nfor i in mult_adap_id:\n  for index, book in graphic_novels.iterrows():\n    if book['ID'] == i:\n      mult_adap_name.append(book['Title'])\n\n\nmult_adap = pd.DataFrame({'BookID': mult_adap_id, 'Title': mult_adap_name})\n\n\n\nFilm Adapted Books - made up of books that have been adapated into films.\n\nconditions = [adaptations['Type'].str.contains('(?:Film|Movie|Feature)', case=False, regex=True),\n              adaptations['Type'].str.contains('(?:Television|Series|Mini)', case=False, regex=True)]\nchoices = [1, 2]\n\nadaptations['TypeCode'] = np.select(conditions, choices, default=3)\n\n\nfilm_adap_id = adaptations.loc[adaptations['TypeCode'] == 1, 'BookID'].tolist()\n\nfilm_adap_name = []\nfor i in film_adap_id:\n  for index, book in books.iterrows():\n    if book['BookID'] == i:\n          film_adap_name.append(book['Title'])\n        \nfilm_adap = pd.DataFrame({'BookID': film_adap_id, 'Title': film_adap_name})\nfilm_adap = film_adap.drop_duplicates().reset_index(drop=True)\n\n\n\nTelevision Adapted DataFrame - made up of books that have been adapted as a television series or miniseries.\n\ntel_adap_id = adaptations.loc[adaptations['TypeCode'] == 2, 'BookID'].tolist()\n\ntel_adap_name = []\nfor i in tel_adap_id:\n  for index, book in books.iterrows():\n    if book['BookID'] == i:\n          tel_adap_name.append(book['Title'])\n        \ntel_adap = pd.DataFrame({'BookID': tel_adap_id, 'Title': tel_adap_name})\ntel_adap = tel_adap.drop_duplicates().reset_index(drop=True)\n\n\n\nOther Adapted DataFrame - made up of books that have been adapated as plays, video games, novels, etc.\n\noth_adap_id = adaptations.loc[adaptations['TypeCode'] == 3, 'BookID'].tolist()\n\noth_adap_name = []\nfor i in oth_adap_id:\n  for index, book in books.iterrows():\n    if i == book['BookID']:\n      oth_adap_name.append(book['Title'])\n        \noth_adap = pd.DataFrame({'BookID': oth_adap_id, 'Title': oth_adap_name})\noth_adap = oth_adap.drop_duplicates().reset_index(drop=True)\n\n\n\nBelow is the code to create a function that we can run our dataframes through to get the top traits we identified earlier:\n\ndef top_traits(df, book_id):\n  id_list = df[book_id].tolist()\n  year_list = []\n  avg_rating_list = []\n  num_rating_list = []\n  genre_list = []\n  page_list = []\n  \n  for i in id_list:\n    for index, row in graphic_novels.iterrows():\n      if i == row['ID']:\n        year_list.append(row['Year'])\n        avg_rating_list.append(row['Avg Rating'])\n        num_rating_list.append(row['Number of Ratings'])\n        \n    for index, row in book_genres.iterrows():\n      if i == row['BookID']:\n        genre_list.append(row['GenreID'])\n        \n    for index, row in issue.iterrows():\n      if i == row['BookID']:\n        page_list.append(row['Pages'])\n        \n  genre_count = pd.DataFrame(genre_list).value_counts().reset_index()\n  genre_count.columns = ['GenreType', 'Count']\n  genre_count = genre_count.groupby('Count').agg(list).reset_index()\n  genres = genre_count[genre_count['Count'] &gt; 1].sort_values(by='Count', ascending=False).reset_index(drop=True)\n  \n  year = sum(year_list)/len(year_list)\n  avg_rating = sum(avg_rating_list)/len(avg_rating_list)\n  num_rating = sum(num_rating_list)/len(num_rating_list)\n  pages = sum(page_list)/len(page_list)\n  \n  return (round(year, 2),\n          round(avg_rating, 2),\n          round(num_rating, 2),\n          round(pages, 2), \n          genres.head(3))"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]