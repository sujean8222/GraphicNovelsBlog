[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "The Recipe to an Adaptation Blog Post\n\n\n\n\n\nexamining graphic novels\n\n\n\n\n\nJul 31, 2024\n\n\nSujean Gallego\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 27, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/GraphicNovels.html#an-overview",
    "href": "posts/GraphicNovels.html#an-overview",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "1. An Overview",
    "text": "1. An Overview\nadaptation – the action or process of adapting or being adapted.\nOr a term to describe a piece of media, usually a television show or movie, that is based on pre-existing work, usually literary or theatrical work.\nThis type of work is very common, so much so that the Oscars even has a category “Best Adapted Screenplay.” Some of the films that won include: - The Godfather (1972) - L.A. Confidential (1997) - The Lord of the Rings: Return of the King (2003) - The Social Network (2010) - Moonlight (2016)\nSome recognizable titles also include: - The Color Purple (1985) - Shrek (2001) - Game of Thrones (2011) - The Handmaid’s Tale (2017) - The Last of Us (2023) - Oppenheimer (2023)\nAnd there is so much more!\nQuickly scrolling through the list of winners in this category on Wikipedia, I noticed that most of these adaptations are based on novels. Very few were theatrical plays, musicals, and, especially, graphic novels. Of course, this could just be due to the fact that I was looking through a list of Oscar nominees. Maybe the Oscars don’t value adaptations based off of graphic novels. Or maybe the quality of adaptations that were made based on graphic novels were never good enough to gain an Oscar nomination. Or maybe there is just a lack of graphic novels in the literary space to begin with.\nWorld renowned director Martin Scorscese once said, “I don’t think [Marvel movies are] cinema” (Connell). Marvel movies are all adapted works based on graphic novels, specifically in the superhero genre. Now that is a whole different conversation that can be very dividing. Something that I will not be delving into in this project. Nonetheless, this shows how graphic novels as a type of work are largely looked down upon. And this doesn’t just end at the lack of adaptations, this is also seen in literary space as well. They are often looked down upon as a lesser form of literature for their lack of text, abundance of pictures, and themes, which are usually superhero-based (Mwissell). People view them congruent to children’s books, which are less text and picture-based, and therefore view graphic novels work targeted towards children, incapable of revealing deeper meanings and insights to life as novels do.\nNow the opposite is seen internationally. Countries such as Japan and South Korea are well known for their adaptations of graphic novels in the media space, and actually seem to be the preferred form of entertainment. Mangas (Japanese graphic novels) have become a major driving force in Japan’s economy (Luster) and top source for adaptations in Japanese entertainment, especially in anime. While not to the same extent, manhwas (South Korean graphic novels) have also been a relevant part of South Korean culture and media. Korean dramas such as The Princess Hours and Boys Over Flowers are examples of Korean entertainment adapted from graphic novels that have accumulated a large cultural significance and an iconic status. Like Japan, South Korean Webtoons—digitally published comics and graphic novels—have become the top source of adaptations for Korean Dramas. It seems much easier to adapt: storyboards are already laid out, a couple of changes can be made to suit the director, the script is basically all written. So…\nWhy aren’t we seeing the same trend in the United States? Is it really American pride and stigma preventing these graphic novels from receiving an adaptation?\nMaybe not…? One example can be seen in Nick Drnasno’s Sabrina, published in 2018, which became the first ever graphic novel to be longlisted for the Booker Prize, a highly prestigious literary award that is selected from a longlist and shortlist of nominees every year (NewStatesman). Winning the Booker Prize basically means that said-book is the “best single work” published in said-year. And being nominated is a great achievement in itself. Sabrina was praised for its mature themes relevant to today’s society which was only elevated by its drawings and visual style (Park). Similar sentiments were met with the graphic novel Persepolis by Marjane Satrapi, which did get an animated feature adaptation in 2007. The film by the same name was also met with great critical acclaim receiving a 97% score on RottenTomatoes (RottenTomatoes)."
  },
  {
    "objectID": "posts/GraphicNovels.html#the-question",
    "href": "posts/GraphicNovels.html#the-question",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "2. The Question",
    "text": "2. The Question\nWith so many outside factors it’s hard to determine why graphic novels aren’t more adapted in today’s society. But maybe the books themselves can reveal traits or characteristics that may shed some light on what makes a good graphic novel for adaptation. In this project, I use data from the Graphic Narrative Corpus, to answer the question:\nWhat makes a good graphic novel for adaptation? or What is the recipe for scoring an adaptation as a graphic novel?"
  },
  {
    "objectID": "posts/GraphicNovels.html#about-the-data",
    "href": "posts/GraphicNovels.html#about-the-data",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "3. About the Data",
    "text": "3. About the Data\nThe data was collected by literary scholars and computer and cognitive scientists at Potsdam and Paderborn universities for a research project, funded by the German Federal Ministry of Education and Research. A total of 253 titles published in the United States, Great Britain, Canada, and India are included in the dataset. Requirements for inclusion were that novels had to be written in English, exceed 64 pages in length, tell one continuous story, target an adult audience and form one single volume or a limited series. Both nonfiction and fictional texts are included in the data, with a vast variety of genres. The project ran from 2014-2020, but includes texts published from the mid-70s to 2017, garnered through various types of collections such as academic databases, library collections, and online lists and bibliographies (cite). The GNC has a total of 20 tables [Adaptation, Author, Book, Book Genre, Country, Ethnicity, Format, Gender, Genre, GNSource, Issue, Language, Place, Publisher, RelBookAuthor, RelBookIllustrator, Source, SourceCategory, SelectionSource,Translation] each coming as their own .csv file. It was noted that because they used a “cheap” data GUI, they referred to the book title rather than the ID. In addition, a “Scheme” PDF file was given which lists brief information about each table and their respective variables, however, the table Book Genre was not listed in the pdf, it was only seen briefly in their Corpus Graph visualization. Some of the tables provided were simply selection sources–or listed options/codes–for columns in other variables. Thus, the tables used in this project were not “selection sources” and selected based on their importance in answering the research question. Specifically, we used the tables: - Adaptation, represented different adaptations (like movie, tv series, novel…) of graphic novels. - Author, information on the authors and illustrators. - Book, main table, contains the information on the books. - Book Genre, provides the genres for each of the books. - RelBookAuthor, junction table to represent the n:m relationship between the book and its authors. - Issue, represents the different issues published for a book.\nLink: https://groups.uni-paderborn.de/graphic-literature/gncorpus/corpus.php"
  },
  {
    "objectID": "posts/GraphicNovels.html#importing-data",
    "href": "posts/GraphicNovels.html#importing-data",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "1. Importing Data",
    "text": "1. Importing Data\nWe begin by imporing the data from the github repository connected to this notebook:\n\ngraphic_novels = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Book.csv')\nadaptations = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Adaptation.csv')\nauthors = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Author.csv')\nbook_genres = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/BookGenre.csv')\nissue = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/Issue.csv')\nrel_book_author = pd.read_csv('https://raw.githubusercontent.com/sujean8222/GraphicNovels/main/RelBookAuthor.csv')"
  },
  {
    "objectID": "posts/GraphicNovels.html#cleaning-and-organizing-data",
    "href": "posts/GraphicNovels.html#cleaning-and-organizing-data",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "2. Cleaning and Organizing Data",
    "text": "2. Cleaning and Organizing Data\n\na. Inspecting the RawData\nWith the data imported, we look at the first few lines of data to see what we’re working with:\n\ngraphic_novels.head()\n\n\n\n\n\n\n\n\n0\n7 Miles A Second\n1\nAutobiography\n5/1/96\n7 Miles A Second.jpg\nEnglish\n0.1\nsearch.proquest.com\ncolour\n...\n978-1-60699-614-0\n7_Miles_A_Second\n4.01\n382\n7 Miles A Second.1\n0.6\n0.5\n0.5.1\nUnnamed: 21\nPaderborn\n\n\n\n\n0\n1\nA Contract With God\n31\nNaN\n1/1/78\nA Contract with God.png\nEnglish\n0\nrollingstone.com\n--&gt; black&white\n...\n978-0-393-32804-2\nA_Contract_With_God\n4.07\n9146\nA Contract With God\n0.0\nNaN\n1.0\nNaN\nPaderborn\n\n\n1\n2\nA Drifting Life\n8\nNaN\n11/20/08\nA Drifting LIfe.jpg\nJapanese\n0\n101 Outstanding Graphic Novels by Stephen Weiner\n--&gt; black&white\n...\n978-1-897299-74-6\nA_Drifting_Life\n4.00\n2404\nGekiga Hy\\u014dry\\u016b\n0.0\n1.0\nNaN\nNaN\nBielefeld\n\n\n2\n3\nA Small Killing\n5\nNaN\n10/3/91\nA Small Killing.JPG\nEnglish\n0\nAmazon.com bestselling graphic novels\ncolour\n...\n1-59291-009-0\nA_Small_Killing\n3.40\n731\nA Small Killing\n0.0\nNaN\n1.0\nNaN\nBielefeld\n\n\n3\n4\nTale of Sand\n0\nNaN\n12/14/11\nTale of Sand.jpg\nEnglish\n0\nen.wikipedia.org/wiki/List_of_Harvey_Award_win...\ncolour\n...\n978-1-936393-09-1\nTale_of_Sand\n3.78\n2386\nTale of Sand\n1.0\nNaN\n1.0\nNaN\nBielefeld\n\n\n4\n5\nAbsolute Justice\n0\nNaN\n11/17/09\nAbsolute Justice.jpg\nEnglish\n1\nAmazon.com bestselling graphic novels\ncolour\n...\n978-1-4012-3526-0\nAbsolute_Justice\n4.17\n1228\nAbsolute Justice\n0.0\nNaN\n1.0\nNaN\nPaderborn\n\n\n\n\n5 rows × 23 columns\n\n\n\nThe original data did not provide column titles, which will be harder to navigate when analyzing the data through python, so we begin data clean-up by adding column names for the rest of the data. In addition, there are a couple of columns not listed in the given “Scheme” PDF file. It is unclear what they are referring to so we will delete those columns from the dataframe.\n\ngraphic_novels.columns = ['ID', 'Title', 'Mentions', 'Unclear', 'Date Published', 'Image', 'Original Language', 'Foreign Key','GN_Source', 'color_type', 'Limited Series', 'Book Series', 'Unlimited Series', 'ISBN', 'Directory','Avg Rating', 'Number of Ratings', 'Original Title', 'Unlisted', 'Unlisted', 'Unlisted', 'Unlisted', 'University']\nadaptations.columns = ['ID', 'BookID', 'Type', 'Title', 'Publication']\nauthors.columns = ['ID', 'FirstName', 'LastName', 'Gender_ID', 'CountryOfOriginID', 'CountryOfResidence', 'DateOfDeath', 'DateOfBirth', 'Ethnicity', 'PenName']\nbook_genres.columns = ['ID', 'BookID', 'SourceID', 'GenreID', 'isMain']\nissue.columns = ['ID', 'FormatID', 'Edition', 'BookID', 'LanguageID', 'Mentions', 'Pages', 'PlaceOfPublicationID', 'PublisherID', 'Delete', 'Date', 'Width', 'Depth', 'Height', 'Unit']\nrel_book_author.columns = ['ID', 'BookID', 'AuthorID']\n\n\ngraphic_novels.drop(columns=['Unclear', 'Unlisted', 'Unlisted', 'Unlisted', 'Unlisted', 'University'], inplace=True)\nissue.drop(columns='Delete', inplace = True)\n\n\n\nb. Describing Dataframes and Filling in Relevant Missing Values\nNow that the columns are named, we describe the different dataframes to gain further information about what they are made up of and if there are any missing values that need to be filled. That way we will have an even amount of values to use in other functions.\n\nadaptations DataFrame\n\nadaptations.describe(include='all')\n\n\n\n\n\n\n\n\nID\nBookID\nType\nTitle\nPublication\n\n\n\n\ncount\n69.000000\n69.000000\n66\n66\n64\n\n\nunique\nNaN\nNaN\n49\n59\n58\n\n\ntop\nNaN\nNaN\nFilm\nBarefoot Gen\n1972-01-01\n\n\nfreq\nNaN\nNaN\n10\n4\n4\n\n\nmean\n52.666667\n138.347826\nNaN\nNaN\nNaN\n\n\nstd\n25.236917\n102.459723\nNaN\nNaN\nNaN\n\n\nmin\n2.000000\n5.000000\nNaN\nNaN\nNaN\n\n\n25%\n38.000000\n57.000000\nNaN\nNaN\nNaN\n\n\n50%\n55.000000\n117.000000\nNaN\nNaN\nNaN\n\n\n75%\n73.000000\n229.000000\nNaN\nNaN\nNaN\n\n\nmax\n91.000000\n312.000000\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nAdaptations seems to be missing some values in ‘Type’, ‘Title’, and ‘Publication’. To find the rows that are missing values we use indexing:\n\nadaptations[adaptations.isnull().any(axis=1)]\n\n\n\n\n\n\n\n\nID\nBookID\nType\nTitle\nPublication\n\n\n\n\n17\n38\n132\nNaN\nNaN\nNaN\n\n\n18\n39\n144\nNaN\nNaN\nNaN\n\n\n24\n45\n266\nMinisiries of animated films\nBone\nNaN\n\n\n42\n64\n148\nPlay\nThe Tragical Comedy or Comical Tragedy of Mr. ...\nNaN\n\n\n55\n77\n284\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nBecause of the way the dataframes were constructed, we need to refer to another dataframe to find the name of the book. Specfically, we use indexing in the dataframe graphic_novels, putting the ‘BookID’ of adaptations in graphic_novel’s ‘ID’. With the title we can look up the missing information on google and fill in the missing values.\n\ngraphic_novels[graphic_novels['ID'] == 219]\n\n\n\n\n\n\n\n\nID\nTitle\nMentions\nDate Published\nImage\nOriginal Language\nForeign Key\nGN_Source\ncolor_type\nLimited Series\nBook Series\nUnlimited Series\nISBN\nDirectory\nAvg Rating\nNumber of Ratings\nOriginal Title\n\n\n\n\n179\n219\nA History of Violence\n7\n1/1/97\nA History of Violence.jpg\nEnglish\n0\nJSTOR\n--&gt; black&white\n0\n0\n0\n978-1-4012-3189-7\nA_History_of_Violence\n3.45\n2060\nA History of Violence\n\n\n\n\n\n\n\n\nadaptations.loc[17, ['Type', 'Title', 'Publication']] = ['Television series', 'Games Of Thrones', '2011-04-17']\nadaptations.loc[18, ['Type', 'Title', 'Publication']] = ['Television series', 'Games Of Thrones', '2011-04-17']\nadaptations.loc[24, 'Publication'] = 'Never Published'\nadaptations.loc[42, 'Publication'] = 'Never Published'\nadaptations.loc[55, ['Type', 'Title', 'Publication']] = ['Feature film', 'Kakera', '2010-04-03']\n\nUnexpectedly, while doing research it was found that one of the adaptations was cancelled and never went into production, so we dropped it.\n\nadaptations = adaptations.drop(index=[24, 42])\n\n\n\nrel_book_author DataFrame\n\nrel_book_author.describe(include='all')\n\n\n\n\n\n\n\n\nID\nBookID\nAuthorID\n\n\n\n\ncount\n287.000000\n287.000000\n279.000000\n\n\nmean\n206.397213\n156.637631\n136.853047\n\n\nstd\n105.920750\n92.720392\n114.200080\n\n\nmin\n22.000000\n1.000000\n1.000000\n\n\n25%\n116.500000\n77.500000\n42.000000\n\n\n50%\n213.000000\n158.000000\n104.000000\n\n\n75%\n292.500000\n237.500000\n227.500000\n\n\nmax\n391.000000\n335.000000\n446.000000\n\n\n\n\n\n\n\n\nrel_book_author[rel_book_author.isnull().any(axis=1)]\n\n\n\n\n\n\n\n\nID\nBookID\nAuthorID\n\n\n\n\n26\n56\n28\nNaN\n\n\n48\n85\n52\nNaN\n\n\n128\n189\n152\nNaN\n\n\n132\n196\n5\nNaN\n\n\n133\n197\n48\nNaN\n\n\n154\n226\n174\nNaN\n\n\n219\n299\n245\nNaN\n\n\n220\n300\n245\nNaN\n\n\n\n\n\n\n\nWe look for the missing AuthorIDs by searching the graphic_novels dataframe for ‘BookID’s and then looking up the authors on the internet. We then look up their last name in the authors dataframe to find the ’AuthorID’ listed as ‘ID’. We input those values into the missing values.\n\nauthors[authors['LastName'] == 'Rusnak']\n\n\n\n\n\n\n\n\nID\nFirstName\nLastName\nGender_ID\nCountryOfOriginID\nCountryOfResidence\nDateOfDeath\nDateOfBirth\nEthnicity\nPenName\n\n\n\n\n306\n397\nKarl\nRusnak\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nrel_book_author.loc[26, 'AuthorID'] = 61\nrel_book_author.loc[48, 'AuthorID'] = 122\nrel_book_author.loc[128, 'AuthorID'] = 64\nrel_book_author.loc[132, 'AuthorID'] = 7\nrel_book_author.loc[133, 'AuthorID'] = 29\nrel_book_author.loc[154, 'AuthorID'] = 11\nrel_book_author.loc[219, 'AuthorID'] = 396\nrel_book_author.loc[220, 'AuthorID'] = 397\n\n\n\nauthors DataFrame\n\nauthors.describe(include='all')\n\n\n\n\n\n\n\n\nID\nFirstName\nLastName\nGender_ID\nCountryOfOriginID\nCountryOfResidence\nDateOfDeath\nDateOfBirth\nEthnicity\nPenName\n\n\n\n\ncount\n351.000000\n351\n351\n346.000000\n311\n289\n25\n261\n325\n63\n\n\nunique\nNaN\n311\n338\nNaN\n37\n22\n25\n234\n8\n63\n\n\ntop\nNaN\nPaul\nDavis\nNaN\nUSA\nUSA\n2005-01-03\n1965-01-01\nWhite\nWill Eisner Maxwell, Will Eisner\n\n\nfreq\nNaN\n6\n3\nNaN\n191\n197\n1\n5\n260\n1\n\n\nmean\n224.276353\nNaN\nNaN\n0.820809\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nstd\n132.302297\nNaN\nNaN\n0.384067\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmin\n1.000000\nNaN\nNaN\n0.000000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n25%\n112.500000\nNaN\nNaN\n1.000000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n50%\n221.000000\nNaN\nNaN\n1.000000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n75%\n346.500000\nNaN\nNaN\n1.000000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmax\n450.000000\nNaN\nNaN\n1.000000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nBecause the dataframe consits of authors and illustrators per book, the size of the dataframe is much larger than the listed graphic novels. Because we only want to see the authors of the book we update the dataframe by dropping rows that are of authors. We do this by checking similarities between author’s ‘ID’ and rel_book_author’s ‘AuthorID’ values, putting those values into a list, and then updating the contents of the dataframe by cross checking between the list and the dataframe’s ‘ID’ column.\n\nauthorID = []\nfor i in rel_book_author['AuthorID']:\n  if i in authors['ID'].values:\n    authorID.append(i)\n\n\nauthors = authors[authors['ID'].isin(authorID)]\n\nNow that we have a dataframe consisting of only authors we can check for missing values and update if needed.\n\nauthors[authors['Gender_ID'].isnull()]\n\n\n\n\n\n\n\n\nID\nFirstName\nLastName\nGender_ID\nCountryOfOriginID\nCountryOfResidence\nDateOfDeath\nDateOfBirth\nEthnicity\nPenName\n\n\n\n\n233\n298\nA. B.\nSina\nNaN\nNaN\nNaN\nNaN\nNaN\nUnknown\nNaN\n\n\n\n\n\n\n\n\nauthors.loc[233, 'Gender_ID'] = 1\n\n\nauthors[authors['CountryOfOriginID'].isnull()]\n\n\n\n\n\n\n\n\nID\nFirstName\nLastName\nGender_ID\nCountryOfOriginID\nCountryOfResidence\nDateOfDeath\nDateOfBirth\nEthnicity\nPenName\n\n\n\n\n32\n37\nBrian\nFies\n1.0\nNaN\nNaN\nNaN\nNaN\nUnknown\nNaN\n\n\n72\n88\nLeela\nCorman\n0.0\nNaN\nUSA\nNaN\n1976-01-01\nUnknown\nNaN\n\n\n103\n130\nSydney\nPadua\n0.0\nNaN\nNaN\nNaN\nNaN\nWhite\nNaN\n\n\n188\n235\nJoshua W.\nCotter\n1.0\nNaN\nNaN\nNaN\nNaN\nWhite\nNaN\n\n\n212\n265\nSarah\nLeavitt\n0.0\nNaN\nCanada\nNaN\nNaN\nWhite\nNaN\n\n\n233\n298\nA. B.\nSina\n1.0\nNaN\nNaN\nNaN\nNaN\nUnknown\nNaN\n\n\n306\n397\nKarl\nRusnak\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n346\n445\nMartin I\nGreen\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nauthors.loc[[32, 72, 188, 306, 346], 'CountryOfOriginID'] = 'USA'\nauthors.loc[[103, 212], 'CountryOfOriginID'] = 'Canada'\nauthors.loc[233, 'CountryOfOriginID'] = 'Iran'\n\n\nauthors[authors['Ethnicity'].isnull()]\n\n\n\n\n\n\n\n\nID\nFirstName\nLastName\nGender_ID\nCountryOfOriginID\nCountryOfResidence\nDateOfDeath\nDateOfBirth\nEthnicity\nPenName\n\n\n\n\n306\n397\nKarl\nRusnak\n1.0\nUSA\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n346\n445\nMartin I\nGreen\n1.0\nUSA\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nauthors.loc[[306, 346], 'Ethnicity'] = 'White'\n\n\n\ngraphic_novels DataFrame\n\ngraphic_novels.describe(include='all')\n\n\n\n\n\n\n\n\nID\nTitle\nMentions\nDate Published\nImage\nOriginal Language\nForeign Key\nGN_Source\ncolor_type\nLimited Series\nBook Series\nUnlimited Series\nISBN\nDirectory\nAvg Rating\nNumber of Ratings\nOriginal Title\n\n\n\n\ncount\n252.000000\n252\n252.000000\n252\n250\n252\n252.000000\n211\n252\n252.000000\n252.000000\n252.000000\n252\n200\n252.000000\n252.000000\n236\n\n\nunique\nNaN\n252\nNaN\n215\n250\n5\nNaN\n27\n4\nNaN\nNaN\nNaN\n244\n200\nNaN\nNaN\n235\n\n\ntop\nNaN\nA Complete Lowlife\nNaN\n1/1/94\nA Complete Lowlife.jpg\nEnglish\nNaN\nsearch.proquest.com\ncolour\nNaN\nNaN\nNaN\n9.7814E+12\nOde_to_Kirihito_Part_Two\nNaN\nNaN\nKirihito Sanka\n\n\nfreq\nNaN\n1\nNaN\n5\n1\n228\nNaN\n50\n119\nNaN\nNaN\nNaN\n6\n1\nNaN\nNaN\n2\n\n\nmean\n157.123016\nNaN\n9.115079\nNaN\nNaN\nNaN\n0.452381\nNaN\nNaN\n0.373016\n0.166667\n0.055556\nNaN\nNaN\n3.924921\n12409.357143\nNaN\n\n\nstd\n91.796527\nNaN\n26.350508\nNaN\nNaN\nNaN\n0.498718\nNaN\nNaN\n0.484569\n0.373420\n0.229517\nNaN\nNaN\n0.292950\n36681.186674\nNaN\n\n\nmin\n1.000000\nNaN\n0.000000\nNaN\nNaN\nNaN\n0.000000\nNaN\nNaN\n0.000000\n0.000000\n0.000000\nNaN\nNaN\n3.010000\n4.000000\nNaN\n\n\n25%\n78.750000\nNaN\n0.000000\nNaN\nNaN\nNaN\n0.000000\nNaN\nNaN\n0.000000\n0.000000\n0.000000\nNaN\nNaN\n3.740000\n723.000000\nNaN\n\n\n50%\n162.500000\nNaN\n2.000000\nNaN\nNaN\nNaN\n0.000000\nNaN\nNaN\n0.000000\n0.000000\n0.000000\nNaN\nNaN\n3.930000\n1906.000000\nNaN\n\n\n75%\n230.000000\nNaN\n7.000000\nNaN\nNaN\nNaN\n1.000000\nNaN\nNaN\n1.000000\n0.000000\n0.000000\nNaN\nNaN\n4.140000\n7458.250000\nNaN\n\n\nmax\n335.000000\nNaN\n294.000000\nNaN\nNaN\nNaN\n1.000000\nNaN\nNaN\n1.000000\n1.000000\n1.000000\nNaN\nNaN\n4.550000\n432336.000000\nNaN\n\n\n\n\n\n\n\nAlthough there are some missing values, they are from columns that serve no purpose towards the question nor analysis.\n\n\nbook_genres DataFrame\n\nbook_genres.describe(include='all')\n\n\n\n\n\n\n\n\nID\nBookID\nSourceID\nGenreID\nisMain\n\n\n\n\ncount\n333.000000\n333.000000\n331\n333\n333.000000\n\n\nunique\nNaN\nNaN\n16\n28\nNaN\n\n\ntop\nNaN\nNaN\namazon.com\nLiterary Fiction\nNaN\n\n\nfreq\nNaN\nNaN\n185\n47\nNaN\n\n\nmean\n267.552553\n165.942943\nNaN\nNaN\n0.756757\n\n\nstd\n133.991147\n94.253470\nNaN\nNaN\n0.429686\n\n\nmin\n3.000000\n1.000000\nNaN\nNaN\n0.000000\n\n\n25%\n166.000000\n84.000000\nNaN\nNaN\n1.000000\n\n\n50%\n286.000000\n170.000000\nNaN\nNaN\n1.000000\n\n\n75%\n378.000000\n246.000000\nNaN\nNaN\n1.000000\n\n\nmax\n479.000000\n335.000000\nNaN\nNaN\n1.000000\n\n\n\n\n\n\n\nSame as graphic_novels, nothing of importance needs to be filled.\n\n\nissue DataFrame\n\nissue.describe(include='all')\n\n\n\n\n\n\n\n\nID\nFormatID\nEdition\nBookID\nLanguageID\nMentions\nPages\nPlaceOfPublicationID\nPublisherID\nDate\nWidth\nDepth\nHeight\nUnit\n\n\n\n\ncount\n354.000000\n354\n183\n354.000000\n235\n171.000000\n348.000000\n352\n353\n354\n342.000000\n342.000000\n342.000000\n338\n\n\nunique\nNaN\n2\n66\nNaN\n2\nNaN\nNaN\n32\n97\n304\nNaN\nNaN\nNaN\n2\n\n\ntop\nNaN\nSC\nFirst Edition\nNaN\nEnglish\nNaN\nNaN\nNew York, USA\nDrawn and Quarterly\n2012-05-01\nNaN\nNaN\nNaN\ninches\n\n\nfreq\nNaN\n201\n34\nNaN\n231\nNaN\nNaN\n97\n35\n3\nNaN\nNaN\nNaN\n328\n\n\nmean\n242.745763\nNaN\nNaN\n153.621469\nNaN\n1.578947\n230.163793\nNaN\nNaN\nNaN\n7.590058\n0.811404\n10.238596\nNaN\n\n\nstd\n128.502831\nNaN\nNaN\n91.130254\nNaN\n0.981248\n140.246507\nNaN\nNaN\nNaN\n2.415411\n0.441291\n3.250432\nNaN\n\n\nmin\n23.000000\nNaN\nNaN\n0.000000\nNaN\n1.000000\n66.000000\nNaN\nNaN\nNaN\n4.200000\n0.200000\n5.500000\nNaN\n\n\n25%\n129.750000\nNaN\nNaN\n71.500000\nNaN\n1.000000\n135.750000\nNaN\nNaN\nNaN\n6.500000\n0.500000\n9.000000\nNaN\n\n\n50%\n245.500000\nNaN\nNaN\n155.500000\nNaN\n1.000000\n200.000000\nNaN\nNaN\nNaN\n6.900000\n0.700000\n9.950000\nNaN\n\n\n75%\n349.750000\nNaN\nNaN\n223.750000\nNaN\n2.000000\n281.750000\nNaN\nNaN\nNaN\n8.000000\n1.000000\n10.500000\nNaN\n\n\nmax\n477.000000\nNaN\nNaN\n335.000000\nNaN\n5.000000\n1344.000000\nNaN\nNaN\nNaN\n23.500000\n2.600000\n27.400000\nNaN\n\n\n\n\n\n\n\n\nissue[issue['Pages'].isnull()]\n\n\n\n\n\n\n\n\nID\nFormatID\nEdition\nBookID\nLanguageID\nMentions\nPages\nPlaceOfPublicationID\nPublisherID\nDate\nWidth\nDepth\nHeight\nUnit\n\n\n\n\n136\n192\nSC\nNaN\n119\nEnglish\n2.0\nNaN\nLondon, UK\nHodder Childrens Books\n2014-01-01\n6.7\n0.5\n9.1\ninches\n\n\n178\n247\nHC\nNaN\n162\nNaN\nNaN\nNaN\nMontreal, Canada\nBlack Eye Books\n1997-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n200\n276\nSC\nFirst Edition\n178\nEnglish\nNaN\nNaN\nToronto, Canada\nVortex Comics Inc.\n1992-01-01\n6.1\n0.5\n8.9\ninches\n\n\n285\n374\nSC\nNaN\n255\nNaN\nNaN\nNaN\nNaN\nNaN\n2013-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n296\n385\nHC\nNaN\n260\nNaN\nNaN\nNaN\nNaN\nEl Capitan Books\n2001-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n318\n425\nHC\nSigned limited edition\n291\nNaN\nNaN\nNaN\nTownshend, USA\nKing Hell Press\n1992-01-01\n6.6\n1.1\n9.1\ninches\n\n\n\n\n\n\n\n\nissue[issue['PlaceOfPublicationID'].isnull()]\n\n\n\n\n\n\n\n\nID\nFormatID\nEdition\nBookID\nLanguageID\nMentions\nPages\nPlaceOfPublicationID\nPublisherID\nDate\nWidth\nDepth\nHeight\nUnit\n\n\n\n\n285\n374\nSC\nNaN\n255\nNaN\nNaN\nNaN\nNaN\nNaN\n2013-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n296\n385\nHC\nNaN\n260\nNaN\nNaN\nNaN\nNaN\nEl Capitan Books\n2001-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nissue[issue['PublisherID'].isnull()]\n\n\n\n\n\n\n\n\nID\nFormatID\nEdition\nBookID\nLanguageID\nMentions\nPages\nPlaceOfPublicationID\nPublisherID\nDate\nWidth\nDepth\nHeight\nUnit\n\n\n\n\n285\n374\nSC\nNaN\n255\nNaN\nNaN\nNaN\nNaN\nNaN\n2013-01-01\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nissue.loc[136, 'Pages'] = 128\nissue.loc[178, 'Pages'] = 152\nissue.loc[200, 'Pages'] = 240\nissue.loc[285, ['Pages', 'PlaceOfPublicationID', 'PublisherID']] = [240, 'New York, USA', 'Bantam Books']\nissue.loc[296, ['Pages', 'PlaceOfPublicationID']] = [224, 'Cincinnati, USA']\nissue.loc[318, 'Pages'] = 176\n\n\n\n\nc. Looking for Duplicated Rows\nWe don’t include the ‘ID’ column from the datasets because as mentioned in ‘About the Data’ the ’ID’s were created from a cheap source.\n\nprint(adaptations.duplicated(subset=['BookID', 'Type', 'Title', 'Publication']).sum())\nprint(authors.duplicated(subset=['FirstName', 'LastName', 'Gender_ID', 'CountryOfOriginID', 'CountryOfResidence', 'DateOfDeath', 'DateOfBirth', 'Ethnicity', 'PenName']).sum())\nprint(graphic_novels.duplicated(subset=['Title', 'Mentions', 'Date Published', 'Image', 'Original Language', 'Foreign Key','GN_Source', 'color_type', 'Limited Series', 'Book Series', 'Unlimited Series', 'ISBN', 'Directory','Avg Rating', 'Number of Ratings', 'Original Title']).sum())\nprint(book_genres.duplicated(subset=['BookID', 'SourceID', 'GenreID', 'isMain']).sum())\nprint(issue.duplicated(subset=['FormatID', 'Edition', 'BookID', 'LanguageID', 'Mentions', 'Pages', 'PlaceOfPublicationID', 'PublisherID', 'Date', 'Width', 'Depth', 'Height', 'Unit']).sum())\nprint(rel_book_author.duplicated(subset=['BookID', 'AuthorID']).sum())\n\n0\n0\n0\n0\n0\n8\n\n\nThere are 8 duplicated rows in the rel_book_author dataframe so we drop them:\n\nrel_book_author.drop_duplicates(subset=['BookID', 'AuthorID'], inplace=True)\n\nWhile there are no exact duplicates, we look for duplicates in ‘BookID’ since some of the dataframes listed sizes greater than the amount of listed graphic novels.\n\nprint(adaptations.duplicated('BookID').sum())\nprint(authors.duplicated(subset=['FirstName', 'LastName']).sum())\nprint(graphic_novels.duplicated(['ID', 'Title']).sum())\nprint(book_genres.duplicated('BookID').sum())\nprint(issue.duplicated('BookID').sum())\nprint(rel_book_author.duplicated('BookID').sum())\n\n28\n0\n0\n81\n101\n27\n\n\nThe above results make sense as there should only be one of each author and graphic novel title from those specific dataframes. The other tables will overlap as they list every occurence where a single book has had an adaptation, genre, issue, and author. It is not uncommon for a book to have multiple adaptations, genres, issues, and authors.\nIn addition, this calculation show that out of the 252 titles in graphic_novels listed, there is a total of 39 single pieces of work that have been adapted at least once, which is 15.5% of total graphic novels published from the mid-70s to 2017.\nWhile not addressing our questions, this provides further evidence for the lack of adaptations of graphic novels.\n\nbook_adaptation = adaptations.shape[0] - adaptations.duplicated('BookID').sum()\nprint(book_adaptation)\npercentage_adaptations = (book_adaptation/graphic_novels.shape[0]) * 100\nprint(percentage_adaptations)\n\n39\n15.476190476190476\n\n\n\n\nd. Changing the Date\nSome tables included dates, such as publication dates, written in a string format. Since it could be useful to see whether the year of publication has an effect on our questions, we change the dates into numerical form.\n\nadaptations['Publication'] = pd.to_datetime(adaptations['Publication'])\nadaptations['Year'] = adaptations['Publication'].dt.year\nadaptations['Month'] = adaptations['Publication'].dt.month\nadaptations['Day'] = adaptations['Publication'].dt.day\n\ngraphic_novels['Date Published'] = pd.to_datetime(graphic_novels['Date Published'], format='%m/%d/%y')\ngraphic_novels['Year'] = graphic_novels['Date Published'].dt.year\ngraphic_novels['Month'] = graphic_novels['Date Published'].dt.month\ngraphic_novels['Day'] = graphic_novels['Date Published'].dt.day"
  },
  {
    "objectID": "posts/GraphicNovels.html#exploring-the-data-with-visualizations",
    "href": "posts/GraphicNovels.html#exploring-the-data-with-visualizations",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "3. Exploring the Data with Visualizations",
    "text": "3. Exploring the Data with Visualizations\nNow that the data is fairly clean we can use it to visually explore trends of the data.\n\na. Adaptations DataFrame\n\nBookID\n\nadaptations['BookID'].value_counts().plot(kind='bar', color='brown', figsize=(10, 2))\n\n\n\n\n\n\n\n\nThere is a total of 9 out of 39 adapted books that have been adapted more than once, with the book with the ID ‘78’ has being adapted the most.\n\n\nType\n\nadaptations['Type'].value_counts().plot(kind='bar', color='brown', figsize=(12, 2))\n\n\n\n\n\n\n\n\nFilms are the most popular type of adaptation, however,‘Type’ is made up of randomly inputted string, with no specific code for what type of adaptation they are.\n\n\nYear\n\nadaptations['Year'].value_counts().plot(kind='bar', color='brown', figsize=(10, 2))\n\n\n\n\n\n\n\n\nMost of adaptations were published in the 2000s, specifically between 2005-2013. Adaptations began releasing in the early 1970s.\n\n\n\nb. authors DataFrame\n\nGenderID\n\nauthors['Gender_ID'].value_counts().plot(x = 'Gender', y = 'Count', kind='pie', colors=['green', 'lightgreen'], figsize=(5, 2))\n\n\n\n\n\n\n\n\nMajority of Male authors dominate graphic novels.\n\n\nCountryOfOriginID\n\nauthors['CountryOfOriginID'].value_counts().plot(kind='bar', color='green', figsize=(12, 2), rot=75)\n\n\n\n\n\n\n\n\nMajority of authors come from the USA and English speaking countries.\n\n\nEthnicity\n\nauthors['Ethnicity'].value_counts().plot(kind='bar', color='green', figsize=(7, 2), rot=45)\n\n\n\n\n\n\n\n\nMajority of authors are of White race, followed by Asian and Unknown.\n\n\n\nc. graphic_novels DataFrame\n\nYear\n\ngraphic_novels['Year'].value_counts().plot(kind='bar', color='pink', figsize=(10, 2))\n\n\n\n\n\n\n\n\nMajority of graphic novels were published in the 2000s. There is an upward trend in publication of graphic novels as the years go by. The most popular year to publish was 2015.\n\n\nOriginial Language\n\ngraphic_novels['Original Language'].value_counts().plot(kind='bar', color='pink', figsize=(5, 1))\n\n\n\n\n\n\n\n\nEnglish is the most common language for graphic novels.\n\n\nAvg Rating\n\ngraphic_novels['Avg Rating'].plot.hist(bins = 150, color='pink', figsize=(20, 3))\n\n\n\n\n\n\n\n\nAverage ratings are skewed to the right with the peak being at 3.8, and slowly decends towards 5.\n\n\nNumber of Ratings\n\ngraphic_novels[0:50].plot.bar(x = 'Title', y = 'Number of Ratings', color='pink', figsize=(20, 3))\n\n\n\n\n\n\n\n\nToo many graphic novels to plot, however it shows number of ratings of some of the more popular and least popular books based on how many people rated the book.\n\n\nAvg Rating vs Number of Ratings\n\ngraphic_novels.plot.scatter(x = 'Avg Rating', y = 'Number of Ratings', color='pink', figsize=(10, 3), marker = 'o')\n\n\n\n\n\n\n\n\nAverage book rating is around the 3.6-4.2 range. There is also a small correlation between number of ratings and average rating in that the more number of ratings, the higher average rating a book receives.\n\n\nLimited Series, Book Series, Unlimited Series\n\nlim_counts = graphic_novels['Limited Series'].value_counts()\nbook_counts = graphic_novels['Book Series'].value_counts()\nunlim_counts = graphic_novels['Unlimited Series'].value_counts()\ncounts_df = pd.DataFrame({'Limited Series': lim_counts,'Book Series': book_counts,'Unlimited Series': unlim_counts})\ncounts_df.plot.bar(color = ['pink', 'salmon', 'lightsalmon'], figsize = (5,3))\n\n\n\n\n\n\n\n\nWhile majority of books are not limited, book, or unlimited series, those that were, were mostly Limited Series, follwed by being a part of a Book Series, and lastly an Unlimited Series.\n\n\n\nd. book_genres DataFrame\n\nBookID\n\nnum_genres = book_genres['BookID'].value_counts().reset_index()\nnum_genres.columns = ['BookID', 'Number of Genres per Book']\nnum_genres['Number of Genres per Book'].value_counts().plot.pie(colors = ['orange', 'darkorange', 'orangered'], figsize=(5, 2), title='Number of Genres per Book')\n\n\n\n\n\n\n\n\nMost books are listed with one genre, however, some have 2 or 3 genres listed per book.\n\n\nGenreID\n\nbook_genres['GenreID'].value_counts().plot(kind='bar', rot=60, color='orange', figsize=(12, 2))\n\n\n\n\n\n\n\n\nLiterary fiction, Memoir, Fantasy, Superhero, and Coming of Age are the most popular genres for graphic novels.\n\n\n\ne. issue DataFrame\n\nFormatID\n\nissue['FormatID'].value_counts().plot(kind='pie', colors= ['orchid', 'purple'], figsize=(3,3))\n\n\n\n\n\n\n\n\nMost books get published as Soft Covers, but there is a good handful of books getting published as Hard Cover. However, it is important to note that this aligns with the number of issues a book gets, so some books have been published as a soft cover and a hard cover.\n\n\nBookID\n\nnum_issues = issue['BookID'].value_counts().reset_index()\nnum_issues.columns = ['BookID', 'Number of Issues per Book']\nnum_issues['Number of Issues per Book'].value_counts().plot.pie(colors = ['orchid', 'purple', 'violet'], figsize=(3,3))\n\n\n\n\n\n\n\n\nMost books have a single edition. About half have 2 editions released, and very few have 3 editions.\n\n\nPages\n\nissue['Pages'].plot.hist(bins = 100, color='orchid', figsize=(7, 3), xlabel='Pages')\n\n\n\n\n\n\n\n\nGraph is skewed to the left, with most books having pages less than 200. There is an outlier that has more than 1200 pages.\n\n\n\nf. rel_book_authors DataFrame\n\nBookID\n\nnum_authors = rel_book_author['BookID'].value_counts().reset_index()\nnum_authors.columns = ['BookID', 'Number of Authors per Book']\nnum_authors['Number of Authors per Book'].value_counts().plot.bar(color = 'red', figsize=(5, 2))\n\n\n\n\n\n\n\n\nMajority of books have one author. Very few have 2, and almost zero have 3 and 4.\n\n\nAuthorID\n\nnum_authors = rel_book_author['AuthorID'].value_counts().reset_index()\nnum_authors.columns = ['BookID', 'Number of Books per Author']\nnum_authors['Number of Books per Author'].value_counts().plot.bar(color = 'red', figsize=(5, 2))\n\n\n\n\n\n\n\n\nMost authors have published 1 graphic novel. A good handful has published 2 books. There are a couple of individuals that have participated in 6-10 novels."
  },
  {
    "objectID": "posts/GraphicNovels.html#narrowing-the-scope",
    "href": "posts/GraphicNovels.html#narrowing-the-scope",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "4. Narrowing the Scope",
    "text": "4. Narrowing the Scope\nOur ultimate goal is to answer the question: “What is the recipe for scoring an adaptation as a graphic novel?\nWe can begin by asking the question: “What are the traits in books that receive adaptations?”\nTo do so, we first must identify what kind of traits we want to examine…We look at the exploratory data to determine what factors (or columns) seemed to show the most variabilitly. - graphic_novels’s Year, the published year of books - graphic_novels’s Avg Rating, average ratings out of 5 stars of books on goodreads - graphic_novels’s Number of Ratings, amount of entires of ratings on goodreads - book_genres’s Genre, different genres of books - issues’s Pages, amount of pages per book\n**Columns that had a dominant value were not included, as it is likely to be the same for all books.*\nWe must also identify the different groups we will be comparing.\nSince we are testing adapted books, we will have to create a dataframe consisting of all books that have been adapted and compare that between all books and books that have not been adapted. It would also be interesting to test the difference between books that have been adapted more than once, books that have been adapted into a film, television series, and other.\nIn total, we have the following groups: - adapted books - books - non-adapted books - multiple adapted books - film adapted books - television adapted books - other adapted books\n\na. Creating the Group DataFrames\nWe create the seven groups of dataframes as it will be easier and faster to run analyses on. They each will contain their ‘BookID’ and ‘Title’.\n\nAdaptations - made up of all books that have been adapted.\n\nadap_books = adaptations[['BookID']].drop_duplicates().reset_index(drop=True)\n\n\nadap_books_title = []\nfor index, i in adap_books.iterrows():\n  for index, book in graphic_novels.iterrows():\n    if i['BookID'] == book['ID']:\n      adap_books_title.append(book['Title'])\n      \nadap_books['Title'] = adap_books_title\n\n\n\nBooks - made up of all books.\n\nbooks = graphic_novels[['ID', 'Title']]\nbooks.columns = ['BookID', 'Title']\n\n\n\nNon-Adapted Books - made up of all books that have not been adapated.\n\nno_adap_books = books[~books['BookID'].isin(adaptations['BookID'])].reset_index(drop=True)\n\n\n\nMultiple-Adapted Books - made up of books that have been adapated more than once.\n\nfrequency_adaptations = adaptations['BookID'].value_counts()\nfrequency_adaptations = frequency_adaptations.reset_index()\nfrequency_adaptations.columns = ['BookID', 'Count']\n\n\nmult_adap_id = []\nfor index, book in frequency_adaptations.iterrows():\n  if book['Count'] &gt; 1: \n    mult_adap_id.append(book['BookID'])\n\nmult_adap_name = []\nfor i in mult_adap_id:\n  for index, book in graphic_novels.iterrows():\n    if book['ID'] == i:\n      mult_adap_name.append(book['Title'])\n\n\nmult_adap = pd.DataFrame({'BookID': mult_adap_id, 'Title': mult_adap_name})\n\n\n\nFilm Adapted Books - made up of books that have been adapated into films.\nSide Quest: Create Adaptation ‘Type’ columns\nHowever, before we can made the Film Adapted Books dataframe, or any dataframe that concerns the adaptations’ type, we need a better code that flags what kind of adaptation they are. As we saw from the data visualizations in adaptation, the type was input as a random string.\nWe can flag the strings by searching for associated words and grouping them together:\n\nconditions = [adaptations['Type'].str.contains('(?:Film|Movie|Feature)', case=False, regex=True),\n              adaptations['Type'].str.contains('(?:Television|Series|Mini)', case=False, regex=True)]\nchoices = [1, 2]\n\nadaptations['TypeCode'] = np.select(conditions, choices, default=3)\n\nNow we can continue with creating the film adapted dataframe:\n\nfilm_adap_id = adaptations.loc[adaptations['TypeCode'] == 1, 'BookID'].tolist()\n\nfilm_adap_name = []\nfor i in film_adap_id:\n  for index, book in books.iterrows():\n    if book['BookID'] == i:\n          film_adap_name.append(book['Title'])\n        \nfilm_adap = pd.DataFrame({'BookID': film_adap_id, 'Title': film_adap_name})\nfilm_adap = film_adap.drop_duplicates().reset_index(drop=True)\n\n\n\nTelevision Adapted DataFrame - made up of books that have been adapted as a television series or miniseries.\n\ntel_adap_id = adaptations.loc[adaptations['TypeCode'] == 2, 'BookID'].tolist()\n\ntel_adap_name = []\nfor i in tel_adap_id:\n  for index, book in books.iterrows():\n    if book['BookID'] == i:\n          tel_adap_name.append(book['Title'])\n        \ntel_adap = pd.DataFrame({'BookID': tel_adap_id, 'Title': tel_adap_name})\ntel_adap = tel_adap.drop_duplicates().reset_index(drop=True)\n\n\n\nOther Adapted DataFrame - made up of books that have been adapated as plays, video games, novels, etc.\n\noth_adap_id = adaptations.loc[adaptations['TypeCode'] == 3, 'BookID'].tolist()\n\noth_adap_name = []\nfor i in oth_adap_id:\n  for index, book in books.iterrows():\n    if i == book['BookID']:\n      oth_adap_name.append(book['Title'])\n        \noth_adap = pd.DataFrame({'BookID': oth_adap_id, 'Title': oth_adap_name})\noth_adap = oth_adap.drop_duplicates().reset_index(drop=True)"
  },
  {
    "objectID": "posts/GraphicNovels.html#b.-making-a-function",
    "href": "posts/GraphicNovels.html#b.-making-a-function",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "b. Making a Function",
    "text": "b. Making a Function\nInstead of coding every trait against every group, we make a function to save time and space. What this function does is take in a dataframe (our groups) and a column (the ‘BookID’ column), and returns the average year, average of average ratings, average of number of ratings, average of pages, and the top three genres of books within a group.\n\ndef top_traits(df, book_id):\n  id_list = df[book_id].tolist()\n  year_list = []\n  avg_rating_list = []\n  num_rating_list = []\n  genre_list = []\n  page_list = []\n  \n  for i in id_list:\n    for index, row in graphic_novels.iterrows():\n      if i == row['ID']:\n        year_list.append(row['Year'])\n        avg_rating_list.append(row['Avg Rating'])\n        num_rating_list.append(row['Number of Ratings'])\n        \n    for index, row in book_genres.iterrows():\n      if i == row['BookID']:\n        genre_list.append(row['GenreID'])\n        \n    for index, row in issue.iterrows():\n      if i == row['BookID']:\n        page_list.append(row['Pages'])\n        \n  genre_count = pd.DataFrame(genre_list).value_counts().reset_index()\n  genre_count.columns = ['GenreType', 'Count']\n  genre_count = genre_count.groupby('Count').agg(list).reset_index()\n  genres = genre_count[genre_count['Count'] &gt; 1].sort_values(by='Count', ascending=False).reset_index(drop=True)\n  \n  year = sum(year_list)/len(year_list)\n  avg_rating = sum(avg_rating_list)/len(avg_rating_list)\n  num_rating = sum(num_rating_list)/len(num_rating_list)\n  pages = sum(page_list)/len(page_list)\n  \n  return (round(year, 2),\n          round(avg_rating, 2),\n          round(num_rating, 2),\n          round(pages, 2), \n          genres.head(3))"
  },
  {
    "objectID": "posts/GraphicNovels.html#applying-the-function",
    "href": "posts/GraphicNovels.html#applying-the-function",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "1. Applying the Function",
    "text": "1. Applying the Function\n\nadap_traits      = top_traits(adap_books, 'BookID')\nbooks_traits     = top_traits(books, 'BookID')\nno_adap_traits   = top_traits(no_adap_books, 'BookID')\nmult_adap_traits = top_traits(mult_adap, 'BookID')\nfilm_adap_traits = top_traits(film_adap, 'BookID')\ntel_adap_traits  = top_traits(tel_adap, 'BookID')\noth_adap_traits  = top_traits(oth_adap, 'BookID')\n\nWe get a list consisting of the year, average ratings, total ratings, pages, and a dataframe of the top three genres, here is the results of the adapted books group:\n\nadap_traits\n\n(1999.85,\n 4.06,\n 39679.41,\n 295.87,\n    Count                                  GenreType\n 0     12                                [Superhero]\n 1      5                                  [Fantasy]\n 2      4  [Memoir , Coming of Age, Science Fiction])\n\n\nBecause we want to visualize our results in a graph to better grasp our results, we put all of our results into one big dataframe:\n\ntraits_df = pd.DataFrame({\n  'Group':['All Adapted Books', 'All Books', 'Non-Adapted Books', 'Multiple-Adapted Books', 'Film Adapted Books', 'Television Adapted Books', 'Other Adapted Books'],\n  'Year':[adap_traits[0], books_traits[0], no_adap_traits[0], mult_adap_traits[0], film_adap_traits[0], tel_adap_traits[0], oth_adap_traits[0]],\n  'Avg Rating':[adap_traits[1], books_traits[1], no_adap_traits[1], mult_adap_traits[1], film_adap_traits[1], tel_adap_traits[1], oth_adap_traits[1]],\n  'Total Ratings':[adap_traits[2], books_traits[2], no_adap_traits[2], mult_adap_traits[2], film_adap_traits[2], tel_adap_traits[2], oth_adap_traits[2]],\n  'Pages':[adap_traits[3], books_traits[3], no_adap_traits[3], mult_adap_traits[3], film_adap_traits[3], tel_adap_traits[3], oth_adap_traits[3]],\n  'Genres':[adap_traits[4], books_traits[4], no_adap_traits[4], mult_adap_traits[4], film_adap_traits[4], tel_adap_traits[4], oth_adap_traits[4]]\n})\n\n\ntraits_df\n\n\n\n\n\n\n\n\nGroup\nYear\nAvg Rating\nTotal Ratings\nPages\nGenres\n\n\n\n\n0\nAll Adapted Books\n1999.85\n4.06\n39679.41\n295.87\nCount Genr...\n\n\n1\nAll Books\n2003.71\n3.92\n12409.36\n230.00\nCount GenreType 0 47 [Litera...\n\n\n2\nNon-Adapted Books\n2004.42\n3.90\n7416.25\n218.10\nCount GenreType 0 44 [Litera...\n\n\n3\nMultiple-Adapted Books\n1997.67\n4.10\n62435.44\n432.58\nCount GenreType 0 ...\n\n\n4\nFilm Adapted Books\n1998.81\n4.05\n48965.11\n298.19\nCount ...\n\n\n5\nTelevision Adapted Books\n2002.44\n4.11\n8438.67\n341.00\nCount GenreType 0 ...\n\n\n6\nOther Adapted Books\n1999.92\n4.08\n21834.00\n307.90\nCount GenreType 0 ...\n\n\n\n\n\n\n\nSince Genres is saved as a dataframe within a dataframe we must take it out and further flatten it into its own dataframe that way it can be graphed:\n\nsources = ['All Adapted Books', 'All Books', 'Non-Adapted Books', \n           'Multiple-Adapted Books', 'Film Adapted Books', \n           'Television Adapted Books', 'Other Adapted Books']\n\ngenre_traits_df = []\nfor i, source in enumerate(sources):\n    genres = traits_df.loc[i, 'Genres'].explode('GenreType')\n    genres['Source'] = source\n    genre_traits_df.append(genres)\n\ngenre_traits_df = pd.concat(genre_traits_df)\n\n\ngenre_traits_df = genre_traits_df.pivot(index='Source', columns='GenreType', values='Count')"
  },
  {
    "objectID": "posts/GraphicNovels.html#graphing-results",
    "href": "posts/GraphicNovels.html#graphing-results",
    "title": "The Recipe to an Adaptation Blog Post",
    "section": "2. Graphing Results",
    "text": "2. Graphing Results\n\na. The Ideal Year\n\nyear_plot = traits_df.plot.bar(x='Group', y='Year', color='cornflowerblue', rot=0, figsize=(16,4), xlabel='Type of Group', ylabel='Year', title='Average Year Book Published per Group of Books')\nyear_plot.set_ylim(1995, 2005)\nticks = np.arange(1995, 2006, 1)\nyear_plot.set_yticks(ticks)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe average year published of all books lies around the year 2004.\nBooks that have been adapted seem to come from books published around or before the year 2000.\nBooks that have not been adapated on average have been newer releases, at least later than the average of all books.\nBooks that have received multiple adaptations significantly come from books published before the 2000s, around 1997-1998.\nFor books within adaptations, television adapated books have been published much later (newer) than film adapted and other adapted books.\n\n\n\nb. The Ideal Rating Score\n\navg_ratings_plot = traits_df.plot.bar(x='Group', y='Avg Rating', color='cornflowerblue', rot=0, figsize=(16,4), xlabel='Type of Group', ylabel='Average Rating Score', title='Average Rating Score per Group of Books')\navg_ratings_plot.set_ylim(3.5, 5)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe average rating of All Books lies just below 4.00.\nNon-Adapted Books barely has any difference from the rating score of all books.\nAdapted Books perform much better in ratings than all books and non-adapted books, with an average score higher than 4.00.\nMultiple-Adapted Books, Film, telelvision, and other adapted books performed around the same mark of all adapted books, 4.00.\n\n\n\nc. The Ideal Amount of Ratings\n\navg_number_plot = traits_df.plot.bar(x='Group', y='Total Ratings', color='cornflowerblue', rot=0, figsize=(16,4), xlabel='Type of Group', ylabel='Average Total of Ratings', title='Average Total of Ratings per Group of Books')\navg_number_plot.set_ylim(0, 70000)\nplt.show()\n\n\n\n\n\n\n\n\n\nAll books have an average of around 15,000 entries of ratings.\nAll Adapted books have a much larger amount of ratings than all books and non-adapted books, with 40,0000 entries\nMultiple-Adapted books have the highest amount of ratings with almost 70,000 entires.\nFilm adapted books have ratings entries around 55,0000.\nTelevision adapated books have surprisingly low amounts of ratings, around the 10,000 mark.\n\n\n\nd. The Ideal Amount of Pages\n\npages_plot = traits_df.plot.bar(x='Group', y='Pages', rot=0, figsize=(16,4), xlabel='Type of Group', ylabel='Pages', color='cornflowerblue', title='Average Number of Pages per Group of Books')\nticks = np.arange(0, 500, 50)\npages_plot.set_yticks(ticks)\nplt.show()\n\n\n\n\n\n\n\n\n\nAll Books have an average around 250 pages.\nNon-adapted books fall just below All book pages.\nAll Adapted Books are about 50 pages more in length than all books, with an average around 300\nMultiple Adapted Books are much higher in length, almost an average of 450 pages.\n\n\n\ne. The Ideal Genre\n\ngenre_plot = genre_traits_df.plot.bar(figsize=(16,4), xlabel='Group', width = 0.7, rot=0, color=['navy', 'skyblue', 'aquamarine', 'seagreen', 'lightcoral', 'lightpink', 'cornflowerblue', 'goldenrod', 'powderblue'])\nticks = np.arange(0, 55, 5)\ngenre_plot.set_yticks(ticks)\nplt.show()\n\n\n\n\n\n\n\n\n\nAll Books and Non-Adapted books have the same top three genres: Literary Fiction, Memoir, and Fantasy.\nAll Adapted Books top genres are Superhero, Fantasy, and, at a tie, Coming-Of-Age, Memoir, and Science Fiction.\nFilm Adapted Books have the most variability in genres with the top genres beings: Superhero, Science Fiction, and Action/Adventure, Coming-Of-Age, Crime, Historical Fiction, and Memoir.\nMultiple Adapted Books most popular genre is Historical Fiction."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]